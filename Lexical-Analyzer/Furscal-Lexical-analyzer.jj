/** These are the default options.
 * If left as is, can be omitted.
 */
options 
{
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = true;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = false;
    IGNORE_CASE = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    SANITY_CHECK = true;
    FORCE_LA_CHECK = false;
}
  
PARSER_BEGIN(Furscal)

/** Simple brace matcher. */
public class Furscal 
{
  /** Main entry point. */
  public static void main(String args[]) throws ParseException, TokenMgrError 
  {
    Furscal parser = new Furscal(System.in);
    parser.Input();
  }
}

PARSER_END(Furscal)

/** Lexical analyzer specification. */ 

/** These separate tokens from each other!
 * If you don't want them to be counted as part of a token
 * (e.g., "xyz 123" would be counted as token despite being wrong)
 * put them as tokens to be skipped.
 */
SKIP : 
{ 
  " "
  | "\n" 
  | "\r" 
  | "\r\n" 
  | "\t" 
}



TOKEN : 
{
  < COMMENT : "/" "*" (~[])* "*" "/" >
}

TOKEN : 
{
  < TYPE : "int" | "decimal" | "bool" | "char" | "string" | "date" | "time" | "datetime" >
}

TOKEN :
{
  < INTDEF : (<DIGIT>) + >
}

TOKEN : 
{
  < DECIMALDEF : <DIGIT> ( ~[] )* "f" >
}

TOKEN : 
{
  < BOOLDEF: "True" | "False" >
}

TOKEN : 
{
  < CHARDEF: "$" <LETTER> >
}


TOKEN : 
{
  < STRINGDEF : "'"  (~["\n","\r"])*  "'" >
}

TOKEN : 
{
  < DATEDEF : "&" <DIGIT> <DIGIT> <DIGIT> <DIGIT> "-" (<DIGIT>){0,1} <DIGIT> "-" (<DIGIT>){0,3} <DIGIT> "&" >
}

TOKEN : 
{
  < TIMEDEF : "&" (<DIGIT>){0,2} <DIGIT> ":" (<DIGIT>){0,5} <DIGIT> ":" (<DIGIT>){0,5} <DIGIT> "&" >
}

TOKEN : 
{
  < DATETIMEDEF : "&" <DIGIT> <DIGIT> <DIGIT> <DIGIT> "-" (<DIGIT>){0,1} <DIGIT> "-" (<DIGIT>){0,3} <DIGIT> (" ")
  (<DIGIT>){0,2} <DIGIT> ":" (<DIGIT>){0,5} <DIGIT> ":" (<DIGIT>){0,5} <DIGIT> "&" >
}

TOKEN : 
{
  < ARR : "arr" >
}

TOKEN : 
{
  < MATRIX : "matrix" >
}

TOKEN : 
{
  < ARRAYSETDEF : "#(" ( ~[] )* ")" >
}

TOKEN : 
{
  < CONSTANT : "const" >
}

TOKEN : 
{
  < NULL : "null" >
}

TOKEN : 
{
  < GLOBAL : "global" >
}

TOKEN : 
{
  < ARITHMETICOPERATOR : 
  "+" 
  | "-" 
  | "*" 
  | "/" 
  >
}

TOKEN : 
{
  < POWER : "**" >
}

TOKEN : 
{
  < POSTFIXINC : "++" >
}

TOKEN : 
{
  < POSTFIXDEC : "--" >
}

TOKEN : 
{
  < MODULUS : "%" >
}

TOKEN : 
{
  < ASSIGN : ":=" >
}

TOKEN : 
{
  < SHIFTLEFT : "<<" >
}

TOKEN : 
{
  < SHIFTRIGHT : ">>" >
}

TOKEN : 
{
  < RELATIONALOPERATOR : 
  "<" 
  | ">" 
  | ">=" 
  | "<=" 
  | "==" 
  | "!=" 
  >
}

TOKEN : 
{
  < LOGICALOPERATOR : 
  "and" 
  | "or" 
  | "not" 
  >
}

TOKEN : 
{
  < FUNCTIONDECLARE : ("def") >
}

TOKEN : 
{
  < RETURN : "return" >
}

TOKEN : 
{
  < QUESTION : "inquire" >
}

TOKEN : 
{
  < DEFAULT_ : 
  "otherwise" 
  | "otherwise if" 
  >
}

TOKEN : 
{
  < LOOP : "perform" > 
}

TOKEN : 
{
  < LOOPCOUNTER : "times" >
}

TOKEN : 
{
  < LOOPUNTIL : "until" >
}

TOKEN : 
{
  < LOOPTESTBEFORE : "with test before" >
}

TOKEN : 
{
  < LOOPTESTAFTER : "with test after" >
}

TOKEN : 
{
  < SHOW : 
  "show" 
  | "print" 
  | "echo" 
  | "display" 
  >
}

TOKEN : 
{
  < CLEAR : 
  "clear" 
  | "clean" 
  >
}

TOKEN : 
{
  < EXIT : "exit" >
}

TOKEN : 
{
  < TYPEOF : "typeof" >
}

TOKEN : 
{
  < HALT : "halt" >
}

TOKEN : 
{
  < PROCEED : "proceed" >
}

// TOKEN : 
// {
//   < CALLING : <ID> "(" (~[])* ")" >
// }

TOKEN : 
{
  < CLASSDECLARE : "class" >
}

TOKEN : 
{
  < OBJECTDECLARE : "summon" >
}

TOKEN : 
{
  < SELF : "self" >
}

TOKEN : 
{
  < PASSALL : "pass" >
}

TOKEN : 
{
  < CHECK : "check" >
}

TOKEN : 
{
  < ONERROR : "onError" >
}

TOKEN : 
{
  < AFTERALL : "after all" >
}

/** Beastman1972's half: */
TOKEN : 
{
  < REQUIRE : "require" >
  {
    System.out.println("<REQUIRE>");
  }
}

TOKEN : 
{
  < FROM : "from" >
  {
    System.out.println("<FROM>");
  }
}

TOKEN : 
{
  < LINE_END : ";" >
  {
    System.out.println("<LINE_END>");
  }
}

TOKEN :
{
  < SEPARATOR : "," >
  {
    System.out.println("<SEPARATOR>");
  }
}

TOKEN : 
{
  < PARENTHESIS_LEFT : "(" >
  {
    System.out.println("<PARENTHESIS_LEFT>");
  }
}

TOKEN : 
{
  < PARENTHESIS_RIGHT: ")" >
  {
    System.out.println("<PARENTHESIS_RIGHT>");
  }
}

TOKEN : 
{
  < SQUARE_LEFT : "[" >
  {
    System.out.println("<SQUARE_LEFT>");
  }
}

TOKEN : 
{
  < SQUARE_RIGHT : "]" >
  {
    System.out.println("<SQUARE_RIGHT>");
  }
}

TOKEN : 
{
  < BRACKET_LEFT : "{" >
  {
    System.out.println("<BRACKET_LEFT>");
  }
}

TOKEN : 
{
  < BRACKET_RIGHT : "}" >
  {
    System.out.println("<BRACKET_RIGHT>");
  }
}

TOKEN : 
{
  < PROCEDURE : "procedure" >
  {
    System.out.println("<PROCEDURE>");
  }
}

TOKEN : 
{
  < SET : "set" >
  {
    System.out.println("<SET>");
  }
}

TOKEN :
{
  < SET_OPERATIONS : 
  "union" 
  | "diff" 
  | "intersect" 
  | "include" 
  | "exclude" 
  >
  {
    System.out.println("<SET_OPERATIONS>");
  }
}

TOKEN : 
{
  < SET_COMPARISONS : 
  "><" 
  | "=" 
  | "<>" 
  | "contains" 
  >
  {
    System.out.println("<SET_COMPARISONS>");
  }
}

TOKEN :
{
  < MATH_CONSTANTS : 
  "Math.PI" 
  | "Math.E" 
  | "Math.SQRT2" 
  | "Math.SQRT2_2" 
  | "Math.LN2" 
  | "Math.LN10" 
  | "Math.LOG2E" 
  | "Math.LOG10E" 
  >
  {
    System.out.println("<MATH_CONSTANTS>");
  }
}

TOKEN : 
{
  < TRIG_FUNCTIONS : 
  "Math.acos" 
  | "Math.acosh" 
  | "Math.asin" 
  | "Math.asinh" 
  | "Math.atan" 
  | "Math.atan2"
  | "Math.atanh" 
  | "Math.cos" 
  | "Math.cosh" 
  | "Math.sin" 
  | "Math.sinh" 
  | "Math.tan" 
  | "Math.tanh" 
  >
  {
    System.out.println("<TRIG_FUNCTIONS>");
  }
}

TOKEN : 
{
  < ASSIGN_OPERATORS : 
  "+=" 
  | "-=" 
  | "*=" 
  | "/=" 
  | "<<=" 
  | ">>=" 
  | ">>>=" 
  | "&=" 
  | "^=" 
  | "|=" 
  | "**=" 
  >
  {
    System.out.println("<ASSIGN_OPERATORS>");
  }
}

TOKEN : 
{
  < ARITHMETIC_FUNCTIONS : 
  "Math.abs" 
  | "Math.exp" 
  | "Math.log" 
  | "Math.log10" 
  | "Math.log1p" 
  | "Math.log2" 
  | "Math.max" 
  | "Math.min" 
  | "Math.random" 
  | "Math.round" 
  | "Math.sqrt" 
  | "Math.pow" 
  | "Math.ceil" 
  | "Math.floor" 
  | "Math.cbrt" 
  | "Math.expm1" 
  | "Math.sign" 
  >
  {
    System.out.println("<ARITHMETIC_FUNCTIONS>");
  }
}

/** General tokens. ALWAYS put after more specific tokens
 * Such as < VAR : "var" >, otherwise these will match to general tokens
 * like <ID>. Order of Token declaration matters!!
 */
TOKEN :
{
  < #DIGIT : ( ["0"-"9"] ) >
}

TOKEN : 
{
  < #LETTER : ( ["a"-"z","A"-"Z"] ) >
}

TOKEN :
{
  < ID : <LETTER> ( <LETTER> | <DIGIT> )* > 
  {
    System.out.println("<ID>");
  }
}



/** Parser/Syntax analyzer specification! */ 
/** Root production. */
/** This only checks that there are no errors. 
 * It outputs nothing, except errors if any.
*/
void Input() :
{
  Token t;
  int ID_counter = 0;
}
{
  (
    t = <COMMENT>
      {
        System.out.println("<COMMENT>: " + t.image);
      }
    |
    t = <TYPE>
      {
        System.out.println("<TYPE>: " + t.image);
      }
    |
    t = <INTDEF>
      {
        System.out.println("<INTDEF>: " + t.image);
      }
    |
    t = <DECIMALDEF>
      {
        System.out.println("<DECIMALDEF>: " + t.image);
      }
    |
    t = <BOOLDEF>
      {
        System.out.println("<BOOLDEF>: " + t.image);
      }
    |
    t = <CHARDEF>
      {
        System.out.println("<CHARDEF>: " + t.image);
      }
    |
    t = <STRINGDEF>
      {
        System.out.println("<STRINGDEF>: " + t.image);
      }
    |
    t = <DATEDEF>
      {
        System.out.println("<DATEDEF>: " + t.image);
      }
    |
    t = <DATETIMEDEF>
      {
        System.out.println("<DATETIMEDEF>: " + t.image);
      }
    |
    t = <ARR>
      {
        System.out.println("<ARR>: " + t.image);
      }
    |
    t = <MATRIX>
      {
        System.out.println("<MATRIX>: " + t.image);
      }
    |
    t = <ARRAYSETDEF>
      {
        System.out.println("<ARRAYSETDEF>: " + t.image);
      }
    |
    t = <CONSTANT>
      {
        System.out.println("<CONSTANT>: " + t.image);
      }
    |
    t = <NULL>
      {
        System.out.println("<NULL>: " + t.image);
      }
    |
    t = <GLOBAL>
      {
        System.out.println("<GLOBAL>: " + t.image);
      }
    |
    t = <ARITHMETICOPERATOR>
      {
        System.out.println("<ARITHMETICOPERATOR>: " + t.image);
      }
    |
    t = <POWER>
      {
        System.out.println("<POWER>: " + t.image);
      }
    |
    t = <POSTFIXINC>
      {
        System.out.println("<POSTFIXINC>: " + t.image);
      }
    |
    t = <POSTFIXDEC>
      {
        System.out.println("<POSTFIXDEC>: " + t.image);
      }
    |
    t = <RELATIONALOPERATOR>
      {
        System.out.println("<RELATIONALOPERATOR>: " + t.image);
      }
    |
    t = <LOGICALOPERATOR>
      {
        System.out.println("<LOGICALOPERATOR>: " + t.image);
      }
    |
    t = <FUNCTIONDECLARE>
      {
        System.out.println("<FUNCTIONDECLARE>: " + t.image);
      }
    |
    t = <RETURN>
      {
        System.out.println("<RETURN>: " + t.image);
      }
    |
    t = <QUESTION>
      {
        System.out.println("<QUESTION>: " + t.image);
      }
    |
    t = <DEFAULT_>
      {
        System.out.println("<DEFAULT_>: " + t.image);
      }
    |
    t = <LOOP>
      {
        System.out.println("<LOOP>: " + t.image);
      }
    |
    t = <LOOPCOUNTER>
      {
        System.out.println("<LOOPCOUNTER>: " + t.image);
      }
    |
    t = <LOOPUNTIL>
      {
        System.out.println("<LOOPUNTIL>: " + t.image);
      }
    |
    t = <LOOPTESTAFTER>
      {
        System.out.println("<LOOPTESTAFTER>: " + t.image);
      }
    |
    t = <LOOPTESTBEFORE>
      {
        System.out.println("<LOOPTESTBEFORE>: " + t.image);
      }
    |
    t = <SHOW>
      {
        System.out.println("<SHOW>: " + t.image);
      }
    |
    t = <CLEAR>
      {
        System.out.println("<CLEAR>: " + t.image);
      }
    |
    t = <EXIT>
      {
        System.out.println("<EXIT>: " + t.image);
      }
    |
    t = <TYPEOF>
      {
        System.out.println("<TYPEOF>: " + t.image);
      }
    |
    t = <HALT>
      {
        System.out.println("<HALT>: " + t.image);
      }
    |
    //t = <CALLING>
      //{
        //System.out.println("<CALLING>: " + t.image);
      //}
    //|
    t = <CLASSDECLARE>
      {
        System.out.println("<CLASSDECLARE>: " + t.image);
      }
    |
    t = <OBJECTDECLARE>
      {
        System.out.println("<OBJECTDECLARE>: " + t.image);
      }
    |
    t = <SELF>
      {
        System.out.println("<SELF>: " + t.image);
      }
    |
    t = <PASSALL>
      {
        System.out.println("<PASSALL>: " + t.image);
      }
    |
    t = <CHECK>
      {
        System.out.println("<CHECK>: " + t.image);
      }
    |
    t = <ONERROR>
      {
        System.out.println("<ONERROR>: " + t.image);
      }
    |
    t = <AFTERALL>
      {
        System.out.println("<AFTERALLL>: " + t.image);
      }
    |

    t = <REQUIRE>
      {
        System.out.println("<REQUIRE>: " + t.image);
      }
    |
    t = <FROM>
      {
        System.out.println("<FROM>: " + t.image);
      }
    |
    t = <LINE_END>
      {
        System.out.println("<LINE_END>: " + t.image);
      }
    |
    t = <SEPARATOR>
      {
        System.out.println("<SEPARATOR>: " + t.image);
      }
    |
    t = <PARENTHESIS_LEFT>
      {
        System.out.println("<PARENTHESIS_LEFT>: " + t.image);
      }
    | 
    t = <PARENTHESIS_RIGHT>
    {
      System.out.println("<PARENTHESIS_RIGHT>: " + t.image);
    }
    | 
    t = <SQUARE_LEFT>
    {
      System.out.println("<SQUARE_LEFT>: " + t.image);
    }
    | 
    t = <SQUARE_RIGHT>
    {
      System.out.println("<SQUARE_RIGHT>: " + t.image);
    }
    | 
    t = <BRACKET_LEFT>
    {
      System.out.println("<BRACKET_LEFT>: " + t.image);
    }
    | 
    t = <BRACKET_RIGHT>
    {
      System.out.println("<BRACKET_RIGHT>: " + t.image);
    }
    | 
    t = <PROCEDURE>
    {
      System.out.println("<PROCEDURE>: " + t.image);
    }
    | 
    t = <SET>
    {
      System.out.println("<SET>: " + t.image);
    }
    | 
    t = <SET_OPERATIONS>
    {
      System.out.println("<SET_OPERATIONS>: " + t.image);
    }
    | 
    t = <SET_COMPARISONS>
    {
      System.out.println("<SET_COMPARISONS>: " + t.image);
    }
    | 
    t = <MATH_CONSTANTS>
    {
      System.out.println("<MATH_CONSTANTS>: " + t.image);
    }
    | 
    t = <TRIG_FUNCTIONS>
    {
      System.out.println("<TRIG_FUNCTIONS>: " + t.image);
    }
    | 
    t = <ASSIGN_OPERATORS>
    {
      System.out.println("<ASSIGN_OPERATORS>: " + t.image);
    }
    | 
    t = <ARITHMETIC_FUNCTIONS>
    {
      System.out.println("<ARITHMETIC_FUNCTIONS>: " + t.image);
    }
    | 
    t = <ID>
    {
      System.out.println("<ID>: " + t.image + " " + "(" + ID_counter + ")");
      ID_counter++;
    }
  )*
  <EOF>
  {
    System.out.println("\nNo invalid strings found.");
  }
}
